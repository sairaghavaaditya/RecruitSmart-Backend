--
-- PostgreSQL database cluster dump
--

SET default_transaction_read_only = off;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

--
-- Roles
--

CREATE ROLE postgres;
ALTER ROLE postgres WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS PASSWORD 'md524bb002702969490e41e26e1a454036c';






--
-- Databases
--

--
-- Database "template1" dump
--

\connect template1

--
-- PostgreSQL database dump
--

-- Dumped from database version 12.19
-- Dumped by pg_dump version 12.19

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- PostgreSQL database dump complete
--

--
-- Database "interview_db" dump
--

--
-- PostgreSQL database dump
--

-- Dumped from database version 12.19
-- Dumped by pg_dump version 12.19

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: interview_db; Type: DATABASE; Schema: -; Owner: postgres
--

CREATE DATABASE interview_db WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'English_India.1252' LC_CTYPE = 'English_India.1252';


ALTER DATABASE interview_db OWNER TO postgres;

\connect interview_db

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: admin_dashboard_jobpost; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.admin_dashboard_jobpost (
    id bigint NOT NULL,
    title character varying(255) NOT NULL,
    description text NOT NULL,
    created_at timestamp with time zone NOT NULL,
    is_active boolean NOT NULL
);


ALTER TABLE public.admin_dashboard_jobpost OWNER TO postgres;

--
-- Name: admin_dashboard_jobpost_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.admin_dashboard_jobpost ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.admin_dashboard_jobpost_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_group; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group (
    id integer NOT NULL,
    name character varying(150) NOT NULL
);


ALTER TABLE public.auth_group OWNER TO postgres;

--
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group_permissions (
    id bigint NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_group_permissions OWNER TO postgres;

--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


ALTER TABLE public.auth_permission OWNER TO postgres;

--
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user (
    id integer NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) NOT NULL,
    first_name character varying(150) NOT NULL,
    last_name character varying(150) NOT NULL,
    email character varying(254) NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL
);


ALTER TABLE public.auth_user OWNER TO postgres;

--
-- Name: auth_user_groups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user_groups (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    group_id integer NOT NULL
);


ALTER TABLE public.auth_user_groups OWNER TO postgres;

--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user_groups ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_user_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user_user_permissions (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_user_user_permissions OWNER TO postgres;

--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user_user_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_user_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id integer NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


ALTER TABLE public.django_admin_log OWNER TO postgres;

--
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_admin_log ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


ALTER TABLE public.django_content_type OWNER TO postgres;

--
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_content_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_migrations (
    id bigint NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


ALTER TABLE public.django_migrations OWNER TO postgres;

--
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_migrations ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_session; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


ALTER TABLE public.django_session OWNER TO postgres;

--
-- Name: interview_question; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.interview_question (
    id integer NOT NULL,
    question text NOT NULL,
    answer text NOT NULL,
    difficulty character varying(20) NOT NULL
);


ALTER TABLE public.interview_question OWNER TO postgres;

--
-- Name: interview_question_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.interview_question ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.interview_question_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: interview_response; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.interview_response (
    id bigint NOT NULL,
    user_answer text NOT NULL,
    question_id integer NOT NULL
);


ALTER TABLE public.interview_response OWNER TO postgres;

--
-- Name: interview_response_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.interview_response ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.interview_response_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: interview_userresponse; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.interview_userresponse (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    response_text text NOT NULL,
    difficulty character varying(10) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    question_id integer NOT NULL
);


ALTER TABLE public.interview_userresponse OWNER TO postgres;

--
-- Name: interview_userresponse_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.interview_userresponse ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.interview_userresponse_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Data for Name: admin_dashboard_jobpost; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.admin_dashboard_jobpost (id, title, description, created_at, is_active) FROM stdin;
1	java developer	dbms,java,core java,problem solving,DSA,springboot	2024-11-20 10:26:12.70819+05:30	t
11	PYTHON	FKJADBFB	2024-11-20 13:21:14.197785+05:30	t
12	FRONTEND	HTML,CSS,JS REACT	2024-11-20 13:21:58.004279+05:30	t
13	backend developer	dsa	2024-11-20 13:30:47.55814+05:30	t
14	AIML	DL,ml,ai	2024-11-20 23:24:30.043953+05:30	t
\.


--
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group (id, name) FROM stdin;
\.


--
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group_permissions (id, group_id, permission_id) FROM stdin;
\.


--
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add log entry	1	add_logentry
2	Can change log entry	1	change_logentry
3	Can delete log entry	1	delete_logentry
4	Can view log entry	1	view_logentry
5	Can add permission	2	add_permission
6	Can change permission	2	change_permission
7	Can delete permission	2	delete_permission
8	Can view permission	2	view_permission
9	Can add group	3	add_group
10	Can change group	3	change_group
11	Can delete group	3	delete_group
12	Can view group	3	view_group
13	Can add user	4	add_user
14	Can change user	4	change_user
15	Can delete user	4	delete_user
16	Can view user	4	view_user
17	Can add content type	5	add_contenttype
18	Can change content type	5	change_contenttype
19	Can delete content type	5	delete_contenttype
20	Can view content type	5	view_contenttype
21	Can add session	6	add_session
22	Can change session	6	change_session
23	Can delete session	6	delete_session
24	Can view session	6	view_session
25	Can add question	7	add_question
26	Can change question	7	change_question
27	Can delete question	7	delete_question
28	Can view question	7	view_question
29	Can add response	8	add_response
30	Can change response	8	change_response
31	Can delete response	8	delete_response
32	Can view response	8	view_response
33	Can add user response	9	add_userresponse
34	Can change user response	9	change_userresponse
35	Can delete user response	9	delete_userresponse
36	Can view user response	9	view_userresponse
37	Can add job	10	add_job
38	Can change job	10	change_job
39	Can delete job	10	delete_job
40	Can view job	10	view_job
41	Can add job post	11	add_jobpost
42	Can change job post	11	change_jobpost
43	Can delete job post	11	delete_jobpost
44	Can view job post	11	view_jobpost
45	Can add interview session	12	add_interviewsession
46	Can change interview session	12	change_interviewsession
47	Can delete interview session	12	delete_interviewsession
48	Can view interview session	12	view_interviewsession
\.


--
-- Data for Name: auth_user; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user (id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined) FROM stdin;
1	pbkdf2_sha256$720000$JKyLCbVgN5t6JnOkRewizE$uSpPC8K25N/PBnxaCpuFbbVJhijBTwFoLn6B+IK/GDo=	2024-11-20 10:55:27.253968+05:30	t	root			sairaghavaaditya7@gmail.com	t	t	2024-11-18 11:06:02.86808+05:30
\.


--
-- Data for Name: auth_user_groups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user_groups (id, user_id, group_id) FROM stdin;
\.


--
-- Data for Name: auth_user_user_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user_user_permissions (id, user_id, permission_id) FROM stdin;
\.


--
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_admin_log (id, action_time, object_id, object_repr, action_flag, change_message, content_type_id, user_id) FROM stdin;
1	2024-11-20 10:56:02.986279+05:30	10	java developer	3		11	1
2	2024-11-20 10:56:02.989506+05:30	9	java developer	3		11	1
3	2024-11-20 10:56:02.9902+05:30	8	java developer	3		11	1
4	2024-11-20 10:56:02.9902+05:30	7	java developer	3		11	1
5	2024-11-20 10:56:02.9902+05:30	6	java developer	3		11	1
6	2024-11-20 10:56:02.991385+05:30	5	java developer	3		11	1
7	2024-11-20 10:56:02.991739+05:30	4	java developer	3		11	1
8	2024-11-20 10:56:02.992053+05:30	3	java developer	3		11	1
9	2024-11-20 10:56:02.992322+05:30	2	java developer	3		11	1
\.


--
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_content_type (id, app_label, model) FROM stdin;
1	admin	logentry
2	auth	permission
3	auth	group
4	auth	user
5	contenttypes	contenttype
6	sessions	session
7	interview	question
8	interview	response
9	interview	userresponse
10	admin_dashboard	job
11	admin_dashboard	jobpost
12	interview	interviewsession
\.


--
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_migrations (id, app, name, applied) FROM stdin;
1	contenttypes	0001_initial	2024-11-18 10:45:22.966057+05:30
2	auth	0001_initial	2024-11-18 10:45:23.056004+05:30
3	admin	0001_initial	2024-11-18 10:45:23.076251+05:30
4	admin	0002_logentry_remove_auto_add	2024-11-18 10:45:23.082479+05:30
5	admin	0003_logentry_add_action_flag_choices	2024-11-18 10:45:23.088281+05:30
6	contenttypes	0002_remove_content_type_name	2024-11-18 10:45:23.115969+05:30
7	auth	0002_alter_permission_name_max_length	2024-11-18 10:45:23.124566+05:30
8	auth	0003_alter_user_email_max_length	2024-11-18 10:45:23.127826+05:30
9	auth	0004_alter_user_username_opts	2024-11-18 10:45:23.132329+05:30
10	auth	0005_alter_user_last_login_null	2024-11-18 10:45:23.136345+05:30
11	auth	0006_require_contenttypes_0002	2024-11-18 10:45:23.140478+05:30
12	auth	0007_alter_validators_add_error_messages	2024-11-18 10:45:23.140478+05:30
13	auth	0008_alter_user_username_max_length	2024-11-18 10:45:23.152374+05:30
14	auth	0009_alter_user_last_name_max_length	2024-11-18 10:45:23.158843+05:30
15	auth	0010_alter_group_name_max_length	2024-11-18 10:45:23.166955+05:30
16	auth	0011_update_proxy_permissions	2024-11-18 10:45:23.16985+05:30
17	auth	0012_alter_user_first_name_max_length	2024-11-18 10:45:23.173353+05:30
18	sessions	0001_initial	2024-11-18 10:45:23.190462+05:30
19	interview	0001_initial	2024-11-18 11:01:55.279671+05:30
20	interview	0002_response_created_at_response_is_correct_and_more	2024-11-18 11:28:25.107691+05:30
21	interview	0003_userresponse	2024-11-18 11:32:11.953463+05:30
22	interview	0004_rename_answer_text_question_answer_and_more	2024-11-18 20:31:09.650294+05:30
23	interview	0005_rename_user_response_response_user_answer_and_more	2024-11-18 20:44:00.757574+05:30
24	interview	0006_remove_response_is_correct	2024-11-18 21:31:06.916407+05:30
25	interview	0007_remove_response_created_at	2024-11-18 21:32:32.157764+05:30
26	admin_dashboard	0001_initial	2024-11-20 09:48:28.814682+05:30
27	admin_dashboard	0002_jobpost_delete_job	2024-11-20 09:58:40.128019+05:30
28	admin_dashboard	0003_remove_jobpost_is_active_jobpost_updated_at_and_more	2024-11-20 10:40:26.559127+05:30
29	admin_dashboard	0004_remove_jobpost_updated_at_jobpost_is_active_and_more	2024-11-20 13:18:13.710672+05:30
30	interview	0008_interviewsession	2024-11-20 14:06:13.362104+05:30
31	interview	0009_delete_interviewsession	2024-11-20 23:22:40.471296+05:30
\.


--
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_session (session_key, session_data, expire_date) FROM stdin;
atlqjpnnztow2q51fou023mpr0riqeey	.eJxVjDsOwjAQBe_iGlk4jn-U9JzBWu96cQDZUpxUiLuTSCmgfTPz3iLCupS49jzHicRFKHH63RLgM9cd0APqvUlsdZmnJHdFHrTLW6P8uh7u30GBXrbakrcYGJQaByKtmbJmZu989mzZBeCgNRpk4_xwNj4bt2khJDUiOCM-X_5SODY:1tCuQs:ZQD45KmAlJw7L0tWFom5fXuZv031Nbi1E8fTs7PbE-g	2024-12-02 11:06:18.101241+05:30
qpixs0dft7wz3q3z2blfub9mnt4b989x	.eJxVjDsOwjAQBe_iGlk4jn-U9JzBWu96cQDZUpxUiLuTSCmgfTPz3iLCupS49jzHicRFKHH63RLgM9cd0APqvUlsdZmnJHdFHrTLW6P8uh7u30GBXrbakrcYGJQaByKtmbJmZu989mzZBeCgNRpk4_xwNj4bt2khJDUiOCM-X_5SODY:1tDdDT:HhZvY9xffYFi2L3Vva0kSbFpJoDg2o1DrXf5D0zHrn4	2024-12-04 10:55:27.255965+05:30
\.


--
-- Data for Name: interview_question; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.interview_question (id, question, answer, difficulty) FROM stdin;
1	What is the purpose of the <doctype> declaration in HTML?	The <doctype> declaration defines the document type and version of HTML being used. It is crucial for browsers to render the document correctly, especially in standards-compliant mode.	Easy
2	Explain the difference between block-level and inline elements in HTML.	Block-level elements take up the full width available and start on a new line, whereas inline elements take up only as much width as necessary and do not start on a new line. Examples of block-level elements are <div>, <p>, and <h1>. Examples of inline elements are <span>, <a>, and <strong>.	Medium
3	What are semantic HTML elements, and why are they important?	Semantic HTML elements clearly describe their meaning in a human- and machine-readable way. Examples include <header>, <footer>, and <article>. They improve accessibility, SEO, and code readability.	Medium
4	What is the purpose of the <meta> tag in HTML?	The <meta> tag provides metadata about the HTML document, such as character encoding, viewport settings, and description. This information is essential for SEO, mobile responsiveness, and proper rendering of the webpage.	Easy
5	How can you create a responsive web page using HTML?	Creating a responsive web page involves using meta viewport settings, media queries, flexible grid layouts, and relative units like percentages. The goal is to ensure the content adjusts smoothly to different screen sizes and orientations.	Medium
6	What is the difference between 'class' and 'id' selectors in CSS?	The 'class' selector is used to style multiple elements with the same class, while the 'id' selector is used to style a single unique element. Classes are reusable, whereas IDs should be unique within a page.	Easy
7	Explain the concept of the CSS box model.	The CSS box model consists of four areas: content, padding, border, and margin. It defines how elements are sized and how spacing is applied around them. Understanding the box model is essential for controlling layout and design.	Medium
8	How do CSS Flexbox and CSS Grid differ?	Flexbox is designed for one-dimensional layouts (either row or column), whereas CSS Grid is designed for two-dimensional layouts (both rows and columns). Flexbox is useful for aligning items along a single axis, while Grid is more powerful for complex layouts.	Hard
9	What are pseudo-classes in CSS, and how are they used?	Pseudo-classes define the state of an element and are used to style elements based on their state, such as :hover, :focus, and :nth-child(). They allow for dynamic and interactive designs without JavaScript.	Medium
10	How can you optimize the performance of CSS on a web page?	Optimizing CSS involves minimizing file sizes using minification, reducing the number of HTTP requests, using shorthand properties, and avoiding complex selectors. These practices improve page load times and rendering speed.	Hard
11	What is the difference between 'let', 'const', and 'var' in JavaScript?	'var' is function-scoped, while 'let' and 'const' are block-scoped. 'const' is used for variables that should not be reassigned. 'let' is preferred for variables that may change. 'var' has hoisting behavior that can lead to bugs, so it is less commonly used.	Easy
12	Explain the concept of closures in JavaScript.	A closure is a function that retains access to its lexical scope even when the function is executed outside that scope. Closures are used to create private variables and functions, among other things. They are fundamental in functional programming.	Hard
13	What is event delegation in JavaScript?	Event delegation is a technique where a single event listener is added to a parent element to manage events for its child elements. This improves performance and is useful for dynamically added elements.	Medium
14	How does the 'this' keyword work in JavaScript?	The 'this' keyword refers to the context in which a function is called. In global functions, it refers to the global object. In object methods, it refers to the object itself. Its value can be influenced by call, apply, bind methods, or arrow functions.	Medium
15	What is the purpose of promises in JavaScript?	Promises are used to handle asynchronous operations. They represent a value that may be available now, in the future, or never. Promises improve the readability of asynchronous code by avoiding callback hell.	Easy
16	What are the advantages of using React over vanilla JavaScript?	React simplifies the creation of dynamic, interactive UIs by using components, virtual DOM, and state management. It promotes reusability, makes code more predictable, and improves performance with efficient rendering.	Easy
17	Explain the concept of state and props in React.	State is a component's local data storage that can change over time, while props are inputs to a component that are passed from a parent component. State is managed within the component, whereas props are immutable.	Medium
18	What is the purpose of the useEffect hook in React?	The useEffect hook allows you to perform side effects in functional components, such as data fetching, subscriptions, and DOM manipulation. It replaces lifecycle methods in class components like componentDidMount, componentDidUpdate, and componentWillUnmount.	Medium
19	How does React's virtual DOM improve performance?	React's virtual DOM is an in-memory representation of the actual DOM. When the state of an application changes, React updates the virtual DOM first, then efficiently updates the real DOM only where changes have occurred. This minimizes the number of costly DOM operations.	Hard
20	What is the purpose of React's key prop?	The key prop is used to give elements a stable identity, especially when rendering lists of elements. It helps React identify which items have changed, are added, or are removed, leading to efficient updates and re-rendering.	Easy
21	What is the difference between <section> and <div> in HTML?	<section> is a semantic element used to group related content that typically has a heading, while <div> is a generic container used for styling or layout purposes without implying any meaning.	Easy
22	Explain the purpose of the <figure> and <figcaption> elements in HTML.	<figure> is used to encapsulate content like images, charts, or code snippets, and <figcaption> provides a caption for the <figure> content. This improves accessibility and semantic clarity.	Medium
23	What is the <template> element used for in HTML?	The <template> element is used to define HTML fragments that are not rendered immediately when the page loads. These templates can be instantiated later using JavaScript, allowing for dynamic content creation.	Medium
24	How do you create an accessible web form using HTML?	An accessible web form should include <label> elements for form controls, aria attributes where necessary, clear instructions, and validation feedback. It should also be navigable via keyboard and screen readers.	Medium
25	What is the purpose of the <noscript> tag in HTML?	The <noscript> tag defines an alternative content for users who have disabled JavaScript in their browsers or whose browsers do not support it. This ensures that essential information or functionality is still accessible.	Easy
26	What is the purpose of the z-index property in CSS?	The z-index property controls the vertical stacking order of elements that overlap. Higher z-index values place elements on top of those with lower values. It only works on positioned elements (relative, absolute, fixed).	Easy
27	Explain the difference between relative, absolute, fixed, and sticky positioning in CSS.	Relative positioning moves an element relative to its normal position. Absolute positioning places an element relative to its nearest positioned ancestor. Fixed positioning attaches an element to the viewport, and sticky positioning toggles between relative and fixed based on the scroll position.	Hard
28	What are media queries in CSS and how are they used?	Media queries are used to apply different styles to elements based on the characteristics of the device, such as screen width, height, resolution, and orientation. They are essential for creating responsive designs.	Medium
29	How does the CSS 'inherit' value work?	The 'inherit' value allows a property to inherit its value from its parent element. This is useful for maintaining consistency across a design by propagating styles down the DOM tree.	Medium
30	What is the purpose of CSS preprocessors like SASS or LESS?	CSS preprocessors like SASS and LESS extend CSS with features like variables, nesting, mixins, and functions. These features make CSS more maintainable, reusable, and easier to manage in large projects.	Medium
31	What is the difference between 'undefined' and 'null' in JavaScript?	'undefined' is the default value of a variable that has been declared but not assigned a value, while 'null' is an assignment value that represents no value or an intentional absence of any object value.	Easy
32	Explain the concept of 'hoisting' in JavaScript.	Hoisting is JavaScript's behavior of moving declarations to the top of the current scope before code execution. This applies to variables and function declarations, allowing them to be used before they are defined.	Medium
33	What is the event loop in JavaScript?	The event loop is a mechanism that handles asynchronous callbacks in JavaScript. It allows the non-blocking execution of code by processing events and messages in the queue after executing synchronous code.	Hard
34	How does the 'async' and 'await' syntax work in JavaScript?	'async' and 'await' are used to write asynchronous code that looks synchronous. 'async' functions return a promise, and 'await' pauses the execution of the function until the promise is resolved or rejected.	Medium
35	What are higher-order functions in JavaScript?	Higher-order functions are functions that can take other functions as arguments or return them as results. They are a key concept in functional programming and are used for tasks like composing functions, managing side effects, and creating reusable code.	Hard
36	What is the Virtual DOM in React and how does it differ from the real DOM?	The Virtual DOM is a lightweight in-memory representation of the actual DOM. React updates the Virtual DOM, then compares it with the previous version, and only updates the real DOM where necessary. This approach improves performance by minimizing direct DOM manipulations.	Medium
37	Explain the concept of 'lifting state up' in React.	Lifting state up refers to the practice of moving shared state to the closest common ancestor of the components that need to access or modify it. This allows multiple components to stay in sync with each other based on the shared state.	Medium
38	What are React fragments and why are they useful?	React fragments (<React.Fragment> or <> </>) allow you to group multiple elements without adding extra nodes to the DOM. They are useful when returning multiple children from a component, reducing unnecessary wrapper elements.	Easy
39	How does the 'key' prop work in React and why is it important?	The 'key' prop helps React identify which items have changed, been added, or removed from a list. It is crucial for maintaining optimal performance during re-rendering by minimizing the number of elements that need to be updated in the DOM.	Easy
40	What is the use of the 'useReducer' hook in React?	The 'useReducer' hook is an alternative to 'useState' for managing complex state logic. It allows you to define a reducer function that determines how state should change in response to actions. This is particularly useful for state management in large applications.	Hard
41	What is the purpose of the <base> tag in HTML?	The <base> tag specifies a base URL for all relative URLs in a document. If present, all links and resources in the page will be relative to the base URL, which can simplify the management of multiple links.	Easy
42	Explain the difference between <b> and <strong> in HTML.	Both <b> and <strong> are used to make text bold, but <strong> conveys that the text is of strong importance, making it a semantic element, whereas <b> is purely presentational.	Medium
43	What are data attributes in HTML, and how are they used?	Data attributes are custom attributes that start with 'data-' and are used to store extra information on HTML elements without affecting their presentation or behavior. They can be accessed via JavaScript to create dynamic effects.	Medium
44	How do you make an image responsive using HTML and CSS?	To make an image responsive, you can set its width to 100% and height to auto using CSS. This ensures the image scales proportionally with its container, adapting to different screen sizes.	Easy
45	What is the <details> and <summary> element in HTML?	The <details> element is used to create a disclosure widget, allowing users to toggle visibility of additional content. The <summary> element acts as the label for the <details> content. This is useful for creating interactive and accessible sections.	Easy
46	What are CSS variables, and how do they work?	CSS variables, also known as custom properties, are variables declared using '--variable-name' syntax. They are used to store values that can be reused throughout a document, improving maintainability and flexibility in theming.	Medium
47	Explain the difference between 'display: none' and 'visibility: hidden' in CSS.	'display: none' removes the element from the document flow, so it doesn't take up any space. 'visibility: hidden' hides the element but still occupies space in the layout. The latter is useful when you want to preserve the layout but hide content.	Medium
48	How do you implement dark mode using CSS?	Dark mode can be implemented using CSS variables to define colors, which are then toggled between light and dark themes based on user preference or a media query like 'prefers-color-scheme'. This provides a consistent and accessible user experience.	Hard
49	What is the difference between 'em' and 'rem' units in CSS?	'em' units are relative to the font-size of the parent element, while 'rem' units are relative to the root element's font-size. Using 'rem' units helps create more consistent and scalable layouts.	Medium
50	How do you center a div horizontally and vertically using CSS?	To center a div, you can use flexbox by setting the parent container to 'display: flex', 'justify-content: center', and 'align-items: center'. Alternatively, with CSS Grid, you can use 'display: grid' and 'place-items: center'.	Easy
51	What is the difference between synchronous and asynchronous programming in JavaScript?	Synchronous programming executes tasks sequentially, blocking further execution until the current task is completed. Asynchronous programming allows tasks to run in the background, enabling non-blocking operations and improving performance.	Medium
52	Explain the concept of 'debouncing' in JavaScript.	Debouncing is a technique used to limit the rate at which a function is executed. It ensures that the function is called after a specified delay once the user stops triggering the event. This is commonly used in scenarios like search input or window resizing.	Medium
53	What is the purpose of the 'fetch' API in JavaScript?	The 'fetch' API provides a modern, promise-based method to make network requests in JavaScript. It simplifies asynchronous HTTP requests for fetching resources from a server, replacing older methods like XMLHttpRequest.	Easy
54	What are 'arrow functions' in JavaScript, and how do they differ from regular functions?	Arrow functions provide a shorter syntax for writing functions in JavaScript. They have lexical scoping of 'this', meaning they do not create their own 'this' context, which makes them useful in certain situations like callbacks.	Medium
55	Explain the concept of 'prototype' in JavaScript.	The 'prototype' is an object that every JavaScript function has, allowing objects created by a constructor function to share properties and methods. This forms the basis of inheritance in JavaScript.	Hard
56	What is the purpose of the 'useContext' hook in React?	The 'useContext' hook allows components to access context values without using a render prop or manually passing down props. It simplifies the process of consuming context in functional components, promoting cleaner code.	Medium
57	Explain the difference between controlled and uncontrolled components in React.	Controlled components have their state managed by React, with form inputs controlled via props. Uncontrolled components rely on the DOM to manage their state, using refs to access values. Controlled components provide more control and validation.	Medium
58	What is the purpose of the 'useMemo' hook in React?	The 'useMemo' hook is used to optimize performance by memoizing the result of a computation. It only recalculates the value when its dependencies change, preventing expensive recalculations on every render.	Hard
59	How do you handle forms in React?	Forms in React are handled by creating controlled components, where the form data is stored in the component's state and updated via event handlers like 'onChange'. This allows for real-time validation and submission handling.	Easy
60	What is the purpose of the 'React.StrictMode' component?	React.StrictMode is a tool for highlighting potential problems in an application by activating additional checks and warnings during development. It helps identify unsafe lifecycle methods, legacy API usage, and other issues.	Easy
61	What is the difference between 'defer' and 'async' attributes in the <script> tag?	The 'defer' attribute loads the script in the background and executes it after the HTML is parsed, whereas the 'async' attribute loads the script asynchronously and executes it as soon as it is ready, potentially before parsing is complete.	Medium
62	What is the purpose of the <progress> element in HTML?	The <progress> element represents the completion progress of a task, typically displayed as a progress bar. It is useful for visual feedback on tasks like file uploads or form submissions.	Easy
63	Explain the difference between <ol> and <ul> elements in HTML.	<ol> represents an ordered list, where items are presented in a sequential order with numbers, while <ul> represents an unordered list, where items are presented with bullet points.	Easy
64	How do you include external resources like CSS or JavaScript in an HTML document?	External resources are included using the <link> tag for CSS files and the <script> tag for JavaScript files. These tags are placed in the <head> or <body> sections of the HTML document, linking to external files via the 'href' or 'src' attributes.	Easy
65	What are HTML5 data storage options for web applications?	HTML5 provides client-side data storage options like localStorage, sessionStorage, and IndexedDB. localStorage stores data with no expiration, sessionStorage stores data for a session, and IndexedDB is a low-level API for storing large amounts of structured data.	Medium
66	What is the purpose of the 'float' property in CSS?	The 'float' property is used to position an element to the left or right of its container, allowing text and inline elements to wrap around it. Although less commonly used today, it was once a primary method for creating layouts.	Medium
67	How do you create a CSS animation?	CSS animations are created using the 'animation' property along with keyframes defined by '@keyframes'. Keyframes specify the intermediate steps in an animation, while 'animation' defines properties like duration, timing, and iteration count.	Hard
68	What is the purpose of the 'box-shadow' property in CSS?	The 'box-shadow' property adds shadow effects around an element's frame. It is commonly used to create depth and highlight elements by adding visual layers, with options for color, blur, spread, and offset.	Easy
69	Explain the difference between 'inline' and 'inline-block' in CSS.	'inline' elements do not respect width and height, taking up only as much space as necessary, while 'inline-block' elements respect width and height properties while still flowing inline with other elements.	Medium
70	What are CSS transitions, and how do they differ from CSS animations?	CSS transitions allow for smooth changes between two states of an element, typically triggered by user interaction like hover. Unlike animations, which can loop and have complex keyframes, transitions are simple, usually triggered by state changes.	Medium
\.


--
-- Data for Name: interview_response; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.interview_response (id, user_answer, question_id) FROM stdin;
1	hkuashddskgha	19
2	css is a good	67
3	Your answer here	1
4	fiihhih	10
5	jjasddfbasjdfbajfb	22
6	kfadkfkj	68
7	fihashdf	26
8	fhjsakgf	63
9	hi hello	1
10	hi hello	1
11	knjfakjngkajnfgkj	2
12	jnfdnakfnjadf	3
13	kfdnkajnfkansdf	4
14	kjfnadkndf	5
15	das	1
16	hfhfjhfh	1
17	bccbgc	2
18	123456	1
19	dsafads	1
20	faukhgh	2
21	fhgsfhasgfjhagd	1
22	fkdsjbjanfbdsnf	1
23	fkafad	2
24	rkjfahfkgh	1
25	hhjkb	1
\.


--
-- Data for Name: interview_userresponse; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.interview_userresponse (id, user_id, response_text, difficulty, created_at, question_id) FROM stdin;
\.


--
-- Name: admin_dashboard_jobpost_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.admin_dashboard_jobpost_id_seq', 14, true);


--
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_id_seq', 1, false);


--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_permissions_id_seq', 1, false);


--
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_permission_id_seq', 48, true);


--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_groups_id_seq', 1, false);


--
-- Name: auth_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_id_seq', 1, true);


--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_user_permissions_id_seq', 1, false);


--
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_admin_log_id_seq', 9, true);


--
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_content_type_id_seq', 12, true);


--
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_migrations_id_seq', 31, true);


--
-- Name: interview_question_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.interview_question_id_seq', 1, false);


--
-- Name: interview_response_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.interview_response_id_seq', 25, true);


--
-- Name: interview_userresponse_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.interview_userresponse_id_seq', 1, false);


--
-- Name: admin_dashboard_jobpost admin_dashboard_jobpost_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.admin_dashboard_jobpost
    ADD CONSTRAINT admin_dashboard_jobpost_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_user_id_group_id_94350c0c_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE (user_id, group_id);


--
-- Name: auth_user auth_user_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_permission_id_14a6b632_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE (user_id, permission_id);


--
-- Name: auth_user auth_user_username_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_username_key UNIQUE (username);


--
-- Name: django_admin_log django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- Name: interview_question interview_question_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.interview_question
    ADD CONSTRAINT interview_question_pkey PRIMARY KEY (id);


--
-- Name: interview_response interview_response_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.interview_response
    ADD CONSTRAINT interview_response_pkey PRIMARY KEY (id);


--
-- Name: interview_userresponse interview_userresponse_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.interview_userresponse
    ADD CONSTRAINT interview_userresponse_pkey PRIMARY KEY (id);


--
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_name_a6ea08ec_like ON public.auth_group USING btree (name varchar_pattern_ops);


--
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON public.auth_group_permissions USING btree (group_id);


--
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON public.auth_group_permissions USING btree (permission_id);


--
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON public.auth_permission USING btree (content_type_id);


--
-- Name: auth_user_groups_group_id_97559544; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_group_id_97559544 ON public.auth_user_groups USING btree (group_id);


--
-- Name: auth_user_groups_user_id_6a12ed8b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_user_id_6a12ed8b ON public.auth_user_groups USING btree (user_id);


--
-- Name: auth_user_user_permissions_permission_id_1fbb5f2c; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_permission_id_1fbb5f2c ON public.auth_user_user_permissions USING btree (permission_id);


--
-- Name: auth_user_user_permissions_user_id_a95ead1b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_user_id_a95ead1b ON public.auth_user_user_permissions USING btree (user_id);


--
-- Name: auth_user_username_6821ab7c_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_username_6821ab7c_like ON public.auth_user USING btree (username varchar_pattern_ops);


--
-- Name: django_admin_log_content_type_id_c4bce8eb; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_content_type_id_c4bce8eb ON public.django_admin_log USING btree (content_type_id);


--
-- Name: django_admin_log_user_id_c564eba6; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_user_id_c564eba6 ON public.django_admin_log USING btree (user_id);


--
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);


--
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);


--
-- Name: interview_response_question_id_64c6fd1a; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX interview_response_question_id_64c6fd1a ON public.interview_response USING btree (question_id);


--
-- Name: interview_userresponse_question_id_d50c4503; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX interview_userresponse_question_id_d50c4503 ON public.interview_userresponse USING btree (question_id);


--
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_group_id_97559544_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_user_id_6a12ed8b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_content_type_id_c4bce8eb_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_user_id_c564eba6_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: interview_response interview_response_question_id_64c6fd1a_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.interview_response
    ADD CONSTRAINT interview_response_question_id_64c6fd1a_fk FOREIGN KEY (question_id) REFERENCES public.interview_question(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: interview_userresponse interview_userresponse_question_id_d50c4503_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.interview_userresponse
    ADD CONSTRAINT interview_userresponse_question_id_d50c4503_fk FOREIGN KEY (question_id) REFERENCES public.interview_question(id) DEFERRABLE INITIALLY DEFERRED;


--
-- PostgreSQL database dump complete
--

--
-- Database "postgres" dump
--

\connect postgres

